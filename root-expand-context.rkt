#lang racket/base
(require "syntax.rkt"
         "scope.rkt")

(provide (struct-out root-expand-context)
         make-root-expand-context)

;; A `root-expand-context` is a subset of `expand-context` that is
;; preserved from a module's expansion for later use in a namespace
;; generated by `module->namespace` --- or preserved across different
;; expansions at the top level
(struct root-expand-context (module-scopes   ; list of scopes for enclosing module or top level; includes next two fields
                             module-push-scope ; a multi-scope to start a fallback layer; the module's outside edge
                             post-expansion-scope  ; scope to add to every expansion; #f if none; often module's inside edge
                             top-level-bind-scope  ; #f or a scope to use for top-level bindings during expansion
                             all-scopes-stx  ; all scopes from enclosing binding context; for `syntax-local-get-shadower`
                             use-site-scopes ; #f or boxed list: scopes that should be pruned from binders
                             defined-syms    ; phase -> sym -> id; symbols picked for bindings
                             frame-id        ; #f or a gensym to identify a binding frame
                             counter         ; box of an integer; used for generating names deterministically
                             )) ; after adding a field, update `copy-module-context` in "expand-context.rkt"

(define (make-root-expand-context #:initial-scopes [initial-scopes null]
                                  #:module-push-scope [module-push-scope (new-multi-scope)]
                                  #:post-expansion-scope [post-expansion-scope (new-scope 'module)]
                                  #:all-scopes-stx [all-scopes-stx #f])
  (define module-scopes (list* post-expansion-scope
                               module-push-scope
                               initial-scopes))
  (root-expand-context module-scopes
                       module-push-scope
                       post-expansion-scope
                       (new-scope 'module) ; top-level-bind-scope
                       (or all-scopes-stx
                           (add-scopes empty-syntax module-scopes))
                       (box null)      ; use-site-scopes
                       (make-hasheqv)  ; defined-syms
                       (gensym)        ; frame-id
                       (box 0)))       ; counter
